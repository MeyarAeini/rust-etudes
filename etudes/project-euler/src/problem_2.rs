//<p>Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with $1$ and $2$, the first $10$ terms will be:
//$$1, 2, 3, 5, 8, 13, 21, 34, 55, 89, \dots$$</p>
//i<p>By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.</p>

struct Fibonacci {
    prev: usize,
    pprev: usize,
}

impl Fibonacci {
    pub fn new() -> Self {
        Self { prev: 1, pprev: 0 }
    }
}

impl Iterator for Fibonacci {
    type Item = usize;
    fn next(&mut self) -> Option<Self::Item> {
        let result = self.prev + self.pprev;

        self.pprev = self.prev;
        self.prev = result;

        Some(self.prev)
    }
}

pub fn print_result() {
    let mut sum: usize = 0;
    let fibo = Fibonacci::new();

    for x in fibo {
        if x >= 4_000_000 {
            break;
        }

        if x % 2 == 0 {
            sum += x;
        }
    }

    println!("problem 2 result is {}", sum);
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn should_work() {
        let mut fibo = Fibonacci::new();
        assert_eq!(fibo.next(), Some(1));
        assert_eq!(fibo.next(), Some(2));
        assert_eq!(fibo.next(), Some(3));
        assert_eq!(fibo.next(), Some(5));
        assert_eq!(fibo.next(), Some(8));
    }
}
